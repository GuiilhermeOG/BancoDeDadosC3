# MongoDB connection details
import os
os.environ['PYTHONUNBUFFERED'] = '1'
import pymongo
mongo_client = pymongo.MongoClient("mongodb://localhost:27017/")
db = mongo_client["labdatabase"]

class Doador:
    def _init_(self, cpf, nome, tipo_sanguineo, telefone, endereco, _id=None):
        self._id = _id
        self.cpf = cpf
        self.nome = nome
        self.tipo_sanguineo = tipo_sanguineo
        self.telefone = telefone
        self.endereco = endereco

        # Tratar _id no formato ObjectId
        if self._id and isinstance(self._id, dict) and "$oid" in self._id:
            self._id = self._id["$oid"]

    def to_dict(self):
        doador_dict = {
            "cpf": self.cpf,
            "nome": self.nome,
            "tipo_sanguineo": self.tipo_sanguineo,
            "telefone": self.telefone,
            "endereco": self.endereco
        }
        if self._id:
            doador_dict["_id"] = self._id
        return doador_dict



class BancoDeSangue:
    def _init_(self, cnpj, razao_social, nome_fantasia, _id=None):
        self._id = _id
        self.cnpj = cnpj
        self.razao_social = razao_social
        self.nome_fantasia = nome_fantasia

        # Tratar _id no formato ObjectId
        if self._id and isinstance(self._id, dict) and "$oid" in self._id:
            self._id = self._id["$oid"]

    def to_dict(self):
        banco_dict = {
            "cnpj": self.cnpj,
            "razao_social": self.razao_social,
            "nome_fantasia": self.nome_fantasia
        }
        if self._id:
            banco_dict["_id"] = self._id
        return banco_dict

class Doacao:
    def _init_(self, codigo_doacao, cpf_doador, cnpj_banco_sangue, data_doacao, quantidade_unidades, _id=None):
        self._id = _id
        self.codigo_doacao = codigo_doacao
        self.cpf_doador = cpf_doador
        self.cnpj_banco_sangue = cnpj_banco_sangue
        self.data_doacao = data_doacao
        self.quantidade_unidades = quantidade_unidades

        # Tratar _id no formato ObjectId
        if self._id and isinstance(self._id, dict) and "$oid" in self._id:
            self._id = self._id["$oid"]

    def to_dict(self):
        doacao_dict = {
            "codigo_doacao": self.codigo_doacao,
            "cpf_doador": self.cpf_doador,
            "cnpj_banco_sangue": self.cnpj_banco_sangue,
            "data_doacao": self.data_doacao,
            "quantidade_unidades": self.quantidade_unidades
        }
        if self._id:
            doacao_dict["_id"] = self._id
        return doacao_dict

class Relatorio:
    def _init_(self):
        # MongoDB connection
        self.db = db

    def insert_doador(self, doador):
        self.db.DOADORES.insert_one(doador.to_dict())

    def update_doador(self, cpf, dados):
        self.db.DOADORES.update_one({"CPF": cpf}, {"$set": Doador(*dados).to_dict()})

    def delete_doador(self, cpf):
        self.db.DOADORES.delete_one({"CPF": cpf})

    def is_cpf_exists(self, cpf):
        return self.db.DOADORES.count_documents({"CPF": cpf}) > 0

    def get_doadores(self):
        return [Doador(**{k.lower(): v for k, v in d.items()}) for d in self.db.DOADORES.find()]

    def insert_banco_de_sangue(self, banco_de_sangue):
        self.db.BANCOS_SANGUE.insert_one(banco_de_sangue.to_dict())

    def delete_banco_de_sangue(self, cnpj):
        self.db.BANCOS_SANGUE.delete_one({"CNPJ": cnpj})

    def update_banco_de_sangue(self, cnpj, dados):
        self.db.BANCOS_SANGUE.update_one({"CNPJ": cnpj}, {"$set": BancoDeSangue(*dados).to_dict()})

    def get_bancos_de_sangue(self):
        return [BancoDeSangue(**{k.lower(): v for k, v in b.items()}) for b in self.db.BANCOS_SANGUE.find()]

    def insert_doacao(self, doacao):
        self.db.DOACOES.insert_one(doacao.to_dict())

    def delete_doacao(self, codigo_doacao):
        self.db.DOACOES.delete_one({"CODIGO_DOACAO": codigo_doacao})

    def update_doacao(self, codigo_doacao, dados):
        self.db.DOACOES.update_one({"CODIGO_DOACAO": codigo_doacao}, {"$set": Doacao(*dados).to_dict()})

    def get_doacoes(self):
        return [Doacao(**{k.lower(): v for k, v in d.items()}) for d in self.db.DOACOES.find()]

    def close_connection(self):
        mongo_client.close()

def menu_doadores(relatorio):
    while True:
        print("#" * 30)
        print("#         Menu de Doadores           #")
        print("#                                    #")
        print("# 1. Adicionar Doador                #")
        print("# 2. Remover Doador                  #")
        print("# 3. Listar Doadores                 #")
        print("# 4. Atualizar Doador                #")
        print("# 5. Voltar ao Menu Principal        #")
        print("#" * 30)

        choice = int(input("Escolha uma opcao: "))

        if choice == 1:
            cpf = input("CPF: ")
            nome = input("Nome: ")
            tipo_sanguineo = input("Tipo Sanguineo: ")
            telefone = input("Telefone: ")
            endereco = input("Endereco: ")
            doador = Doador(cpf, nome, tipo_sanguineo, telefone, endereco)
            relatorio.insert_doador(doador)
            print("Doador adicionado com sucesso.")
        elif choice == 2:
            cpf = input("CPF do doador a ser removido: ")
            relatorio.delete_doador(cpf)
            print("Doador removido com sucesso.")
        elif choice == 3:
            doadores = relatorio.get_doadores()
            if doadores:
                print("Lista de Doadores:")
                for doador in doadores:
                    print(f"CPF: {doador.cpf}, Nome: {doador.nome}, Tipo Sanguineo: {doador.tipo_sanguineo}, Telefone: {doador.telefone}, Endereco: {doador.endereco}")
            else:
                print("Nenhum doador encontrado.")
        elif choice == 4:
            cpf = input("CPF do doador a ser atualizado: ")
            nome = input("Nome: ")
            tipo_sanguineo = input("Tipo Sanguineo: ")
            telefone = input("Telefone: ")
            endereco = input("Endereco: ")
            doador_data = (cpf, nome, tipo_sanguineo, telefone, endereco)
            relatorio.update_doador(cpf, doador_data)
            print("Doador atualizado com sucesso.")
        elif choice == 5:
            break
        else:
            print("Opcao invalida")

def menu_bancos_de_sangue(relatorio):
    while True:
        print("#" * 30)
        print("#    Menu de Bancos de Sangue        #")
        print("#                                    #")
        print("# 1. Adicionar Banco de Sangue       #")
        print("# 2. Remover Banco de Sangue         #")
        print("# 3. Listar Bancos de Sangue         #")
        print("# 4. Atualizar Banco de Sangue       #")
        print("# 5. Voltar ao Menu Principal        #")
        print("#" * 30)

        choice = int(input("Escolha uma opcao: "))

        if choice == 1:
            cnpj = input("Digite o CNPJ: ")
            razao_social = input("Digite a Razao Social: ")
            nome_fantasia = input("Digite o Nome Fantasia: ")
            banco_de_sangue = BancoDeSangue(cnpj, razao_social, nome_fantasia)
            relatorio.insert_banco_de_sangue(banco_de_sangue)
            print("Banco de Sangue adicionado com sucesso.")
        elif choice == 2:
            cnpj = input("Digite o CNPJ do Banco de Sangue a ser removido: ")
            relatorio.delete_banco_de_sangue(cnpj)
            print("Banco de Sangue removido com sucesso.")
        elif choice == 3:
            bancos = relatorio.get_bancos_de_sangue()
            if bancos:
                print("Lista de Bancos de Sangue:")
                for banco in bancos:
                    print(f"CNPJ: {banco.cnpj}, Razao Social: {banco.razao_social}, Nome Fantasia: {banco.nome_fantasia}")
            else:
                print("Nenhum banco de sangue encontrado.")
        elif choice == 4:
            cnpj = input("Digite o CNPJ do Banco de Sangue a ser atualizado: ")
            razao_social = input("Digite a Razao Social: ")
            nome_fantasia = input("Digite o Nome Fantasia: ")
            banco_data = (cnpj, razao_social, nome_fantasia)
            relatorio.update_banco_de_sangue(cnpj, banco_data)
            print("Banco de Sangue atualizado com sucesso.")
        elif choice == 5:
            break
        else:
            print("Opcao invalida")

def menu_doacoes(relatorio):
    while True:
        print("#" * 30)
        print("#         Menu de Doacoes            #")
        print("#                                    #")
        print("# 1. Adicionar Doacao                #")
        print("# 2. Remover Doacao                  #")
        print("# 3. Listar Doacoes                  #")
        print("# 4. Atualizar Doacao                #")
        print("# 5. Voltar ao Menu Principal        #")
        print("#" * 30)

        choice = input("Escolha uma opcao: ")

        if choice == "1":
            codigo_doacao = int(input("Codigo de Doacao: "))
            cpf_doador = input("CPF do Doador: ")
            cnpj_banco_sangue = input("CNPJ do Banco de Sangue: ")
            data_doacao = input("Data da Doacao (YYYY-MM-DD): ")
            quantidade_unidades = int(input("Quantidade de Unidades (ml): "))
            doacao = Doacao(codigo_doacao, cpf_doador, cnpj_banco_sangue, data_doacao, quantidade_unidades)
            relatorio.insert_doacao(doacao)
            print("Doacao adicionada com sucesso.")
        elif choice == "2":
            codigo_doacao = int(input("Codigo da Doacao a ser removida: "))
            relatorio.delete_doacao(codigo_doacao)
            print("Doacao removida com sucesso.")
        elif choice == "3":
            doacoes = relatorio.get_doacoes()
            if doacoes:
                print("Lista de Doacoes:")
                for doacao in doacoes:
                    print(f"Codigo de Doacao: {doacao.codigo_doacao}, CPF do Doador: {doacao.cpf_doador}, CNPJ do Banco de Sangue: {doacao.cnpj_banco_sangue}, Data: {doacao.data_doacao}, Quantidade de Unidades: {doacao.quantidade_unidades} ml")
            else:
                print("Nenhuma doacao encontrada.")
        elif choice == "4":
            codigo_doacao = int(input("Codigo da Doacao a ser atualizada: "))
            cpf_doador = input("CPF do Doador: ")
            cnpj_banco_sangue = input("CNPJ do Banco de Sangue: ")
            data_doacao = input("Data da Doacao (YYYY-MM-DD): ")
            quantidade_unidades = int(input("Quantidade de Unidades (ml): "))
            doacao_data = (cpf_doador, cnpj_banco_sangue, data_doacao, quantidade_unidades)
            relatorio.update_doacao(codigo_doacao, doacao_data)
            print("Doacao atualizada com sucesso.")
        elif choice == "5":
            break
        else:
            print("Opcao invalida")


def display_splash_screen(relatorio):
    total_doadores = len(relatorio.get_doadores())
    total_bancos = len(relatorio.get_bancos_de_sangue())
    total_doacoes = len(relatorio.get_doacoes())

    print("#" * 30)
    print("#        Bem-vindo ao Sistema       #")
    print("#         de Controle de Sangue     #")
    print("#" * 30)
    print(f"Total de Doadores: {total_doadores}")
    print(f"Total de Bancos de Sangue: {total_bancos}")
    print(f"Total de Doacoes: {total_doacoes}")
    print("#" * 30)

    while True:
        print("#" * 30)
        print("#          Menu Principal           #")
        print("#                                    #")
        print("# 1. Gerenciar Doadores             #")
        print("# 2. Gerenciar Bancos de Sangue     #")
        print("# 3. Gerenciar Doacoes              #")
        print("# 4. Exibir Estatisticas            #")
        print("# 5. Sair do Sistema                #")
        print("#" * 30)

        choice = input("Escolha uma opcao: ")

        if choice == "1":
            menu_doadores(relatorio)
        elif choice == "2":
            menu_bancos_de_sangue(relatorio)
        elif choice == "3":
            menu_doacoes(relatorio)
        elif choice == "4":
            display_statistics(relatorio)
        elif choice == "5":
            relatorio.close_connection()
            print("Sistema encerrado. Ate logo!")
            break
        else:
            print("Opcao invalida")

def display_statistics(relatorio):
    total_doadores = len(relatorio.get_doadores())
    total_bancos = len(relatorio.get_bancos_de_sangue())
    total_doacoes = len(relatorio.get_doacoes())

    print("#" * 30)
    print("#         Estatisticas Atuais        #")
    print("#" * 30)
    print(f"Total de Doadores: {total_doadores}")
    print(f"Total de Bancos de Sangue: {total_bancos}")
    print(f"Total de Doacoes: {total_doacoes}")
    print("#" * 30)

relatorio = Relatorio()
display_splash_screen(relatorio)
